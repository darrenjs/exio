TODO for libadmin
=================


Work: new approach to snapshots

- raw table is converted into a txMessage type structure
- AI::send_one
  -> enqueueToSend
  ->  protocol.encodeMsg



----------------------------------------------------------------------
ALL
---

* [MEDIUM] Introduce provide AtomicInt & AtomicBool classes

* [EASY] Allow it to be configured whether the RowLastUpdated is automatically
         added or not.

* [EASY] Allow heartbeats, on a per session basis, to be option. Can have a
  field in the logon message.

* [EASY] in send_one(LIST), we loop ver each message and call the enque for each.
  Instead, have a mthod on the IO that takes a list, this is to avoid
  interleaving of snapshots etc.

* [EASY] rmeove old _nolock_send_snapshopt_as_single_msg

* prefer to use check_enc_size, because of the margin etc.  ie remove uses of
  the other function, which calcs msg size.

* [MEDIUM/HIGH] - have noticed that even when the regsim has gone down, ximond
  is still sending regular updates, eg, below.  Need to investigate why these
  are being sent, and then resolve.

{SAM0100:00029:heartbeat:[]}
{SAM0100:00161:tableupdate:[head=[tablename=xi.hosts,msgtype=tableupdate,],body=[rows=1,row_0=[RowKey=xi.uat.zurichH,RowLastUpdated=2013/02/10 16\:58\:39,],],]}
{SAM0100:00161:tableupdate:[head=[tablename=xi.hosts,msgtype=tableupdate,],body=[rows=1,row_0=[RowKey=xi.uat.zurichH,RowLastUpdated=2013/02/10 16\:56\:06,],],]}
{SAM0100:00161:tableupdate:[head=[tablename=xi.hosts,msgtype=tableupdate,],body=[rows=1,row_0=[RowKey=xi.uat.zurichH,RowLastUpdated=2013/02/10 16\:58\:44,],],]}
{SAM0100:00161:tableupdate:[head=[tablename=xi.hosts,msgtype=tableupdate,],body=[rows=1,row_0=[RowKey=xi.uat.zurichH,RowLastUpdated=2013/02/10 16\:56\:06,],],]}
{SAM0100:00029:heartbeat:[]}


* [HARD] "Big Message Problem" - this is the problem where a single txMessage
  is too large to be encoded.  Eg. it could be something as simple as a filed
  name being very very long.  Or maybe there are cases where the protocol
  window is smaller.  Whatever.  The problme remains that we have a txMessage
  whic, as currently implemented, cannot be serialised into a SAM message.  So
  the solution has to be message fragmenting.  This requires support on both
  sender and receiver (which also means the Java GUI needs updating).  So next
  thing is to sit down and design this out.

* [HARD] for estimation of size, we need to consider cases where a single row,
  or even part of a row, like the fielname or field value, might already
  exceed the max msg size.  Just adding up the parts is not enought, because
  the counter could wrap around.  So need to review the calc-message-size
  routine.  This should be esay to test though, by reducing the buffer size.

* [HARD] another approach to encoding large messages is to send a fully
  encoded message in chunks, which must be reassemlbed at the receiver site.

* [DONE] Allow use of keepalive to be configured

* [DONE] move the string_error function into a common location, and use
  whereever strerror is currently called.

* [DONE] - add heatbeating.

* Use smart_ptrs and dynamic memory instead of the current QueuedItem
  class. The QueuedItem stores its buffer via stack array; advantage is that
  there is no memory management required, but disadvantage is that lots of
  memory copying is taking place.  A better approach would be to dynamically
  allocate some memory just before we encode a Message, and then pass a
  pointer around, until the raw bytes been writted.  This approach however
  will require some kind of smart pointer for safest approach, or, I could
  instead have the Queued Item only deallocate its memory when release() is
  called.  Also, with QueuedItem, only the last holder of the item really
  needs to memory; ie., once a copy has been taken, the memory ownership has
  moved out.

* ximon.gui table events.  A current problem in the ximon gui is that we have
  to hard-code teh table name and column name of xihosts.connection, so that
  when a TCP connection to a server is lost, we can set the connectivity
  status to down.  To make this generic, the source tables need to define a
  set of EventActions that should apply in the case of a disconnect event.
  Need to spell out the logic for this, and then add support in both the
  ximon.gui and exio admin server.  Start with a design for this, then
  implement the simplest version. Later we can consider having regexp matching
  etc.

* exio / ximon.  Standardise the approach to column styles. Currently is a bit
  of a mess and not well defined.  Basically, we need to allow the end user to
  specify various presentation styles for their columns, and they styles need
  to be supported by the GUI.  The GUI should not do anything, by default.

* [VHARD] exio.  How can we reduce the number of threads?  Can we have 1 thread per
  session, instead of two?  Can we have 1 thread to handle all sessions?

* ximon.gui -- is the GUI currently sending logon messages?

* exio & clients : need a mechanism to support message splitting and
  recombination.

* exio & clients: should we group admin commands into categories?

* [HARD] exio : change the session ID so that it can wrap-around.  The current
  one cannot.  Use something like a pending array with a wrap around mask.
  This means we will only be able to support a fixed number of simulataneous
  clients, which is fine for now.

* [HARD] exio router. Would be nice to have a generic router, which connects
  to other exio services, and then unifies them, so that clients which cannot
  reach colo hosts instead can use the exio router (exiord). Need a design.

* ximon.gui.  The "Delete All Rows" option is misleading, because it deletes
  all rows in table XYZ, now just the visible row.  So consider renaming this
  option. Also, is it possible to provide an option like "delete all visible
  rows".

* ximon.gui: When opening an admin pane, the title is just "Admin". Instead,
  can we provide a better title, something that suggests which server is being
  admin'd.

* exio:  provide user authentication

* ximon.gui: provide an option in the Admin pane to allow a command to be sent
  repeatedly.

* support individual row deletion.  This would require support in the
  ximon.gui also.

* ximon.gui & exio.  If the user clicks on delete row, should the gui send a
  message to all connected sessions, requesting a snapshot?

* exio hardening: make core classes (eg SAM structures etc) exception and
  thread safe in the copy constructors and assignment operators.

* Improv: "xi.services" string appears everywhere ... make a constant. Same
  for lots of its fields.

* Improvement: ximond program should really have a main application facade
  class.

* BUG: at moment, if regsim is killed (or ximond loses connection to regsim),
  ximond is currently not setting the state of its processes to down.

* DESIGN PROBLEM.  In the GUI, if we click "Delete all rows", the table is
  cleared.  However, the data source is now only sending table updates, thus,
  the full table contents don't be repopulated.

* DESIGN PROBLEM.  When we have a lock protecting a collection, it is always
  safe to take the approach of taking a copy of the collection while locked,
  and then iterating over the collection outside of the lock?  Whole point is
  to reduce the lock scope.

* Add the AdminCommand button, to the xi.services table. Lots of stuff
  involved with this piece of work.

* Introduce a callback mechanism to the monitor.  This is so that the client
  application can be notified on events on tables.  The implementation should
  be based on the callback framework that Session's use to subscribe to
  tables, ie, the Session and Client are just to instances of a callback base
  class.  So the first step in this tasks to introduce a base-class callback &
  events and get the Session callback to be based on them.

* Rationalise the main AdminInterface header file.  Possible rename to pcam.h,
  or whatever package name we eventually use?  Also, take a look at what
  header files are being exported, because after recent refactoring, some of
  them may no longer be needed.

* [DONE] Remove the table_clear from Admin commands.

* move the thread_queue inside of the QueueWriter, and add internal locking
  there.  Also, inside the locking scope, include the isStopping flag, and
  maybe add a new flag, isDone.  Point is, there is some code in
  AdminSession::~AdminSession which will call close_fast, and we want to have
  a way of briefly waiting for that queue to be written to socket before
  closing close_fast.

* admin needs to be able to display tabular data

* decide: in the admin output to console, should we indicate if there is more
  to follow?

* add a debug flag to admin, to see the raw messages etc.

* why are there so many TIME_WAIT sockets? I don't think it is due to the
  ::shutdown call, so what is calling it?

* instead of a blocking read, or a read with a timeout, instead use select
  with a second file descriptor, which we can write to when we want the reader
  thread to unblock.

----------------------------------------------------------------------
UNCLASSIFIED
------------

* Change project name, to "expose" maybe?

* split sam.h so that the tx types can be used included on their own. I.e, sam
  has nothing to do with tx.

* format into an autoconf project
  -> learn how to use auto conf
  -> devise what the structure of the code/build should look like

* For some of the tx containers, use the swap approach for writing exception
  safe operator=

* remove INFO type lines.  I don't want that style of logging.

----------------------------------------------------------------------
TEST CASES
----------

while true; do ./admin 127.0.0.1 33333 list; done

----------------------------------------------------------------------
DONE
----


* the sam decode must discard a connection is the leading bytes don't look
  like a SAM message.


----------------------------------------------------------------------
DESIGN DISCUSSION
-----------------


* I used to have an admin command to delete tables.  This command was part of
  the AdminInterface/Monitor class, to every application would automatically
  have the ability to allow a remote admin command to clear a table.  However,
  this turns out not to be such a good idea: allowing a table to be cleared
  via a remote admin command means the client application, which is
  responsible for updating the table, now has assume that its tables could be
  cleared at any time.  I.e., on each table update iteration, the client now
  has to check if the table has been cleared (and if so, repopulate with
  static content); or, I need to introduce table-event callbacks into the
  client.  Note that at some point client-callbacks will likely be added, but,
  I am still unsure about adding admin commands (at the AdminInterface level)
  that can clear/drop tables.  If a client application wants that
  functionality, then they can add it.

Put locks on the outside of DataTable?
--------------------------------------

/*
 * TODO: consider placing the table lock on the outside?  -> the main problem
 * with that is that it is going to be hard to ensure proper locking, ie, we
 * canot be certain that all future code writte, that access the table, will
 * properly call lock and unlock before methods calls.
 */

----------------------------------------------------------------------

asp
zmon
pmax
pmac
ipad
amp [used]
axis [used]
libadmin
pmax
amp:
libamp
admin
libadmin
namespace libad
dot
axe -- C++ Parser
rex
sky
axis
libaxis
flex -- unix tool
xray
XXX it a lightwiehgt lmon
pmax  <--- don't like.
CCM     libccm     <-- but is it really command and control
ARIA - advanaced robitcss interface for Applications.
AXIA
IAM
ICM   is a C++ librayr for prvuding any application with and Intefrace for
Control and Montr
icom :
icom
servo
libadmin
ccm -- someone has a utility called that
rex
admin
exmo  -- wierd sounding
expo -- libexpo is part of compiz
exim -- gone
[pa] process / applicatio
[mo]  monitor, observe
[macoex] manage / admin / control / operate exect / management
[ex] execution
[awns] alert, warn, notify, signal
como
amox
libadmin
libadmin
amox
cmd
Cmd
moa
mox
COMI  is an application command and monitoring framework that allows your
application to be controlled via remote command, and for same application to
publish data to be monitor.
CCMXF  consists of two parts.  libxmcmd.   lilgui, is the
MARS is an
Control and Monotirong
Ceres
MARS
libmars
qualia
monio
Ceres
quartz
quant
axon -- does exist, but nothing active.  Name is gone on sourceforge & google.
Ceres -- confused pronounciation
Admin ex
amex
amex
ade
sirius
ceres::
GYRO
gyro::
gyro
corona
ceres
xerces
cio
comio
CMDIO
CMIO
cmdio
ceres
imon
imon C
xerces
cerse
command
amio
gate
ccm
amio
amio
amio
earth
amio
moio
momo
servo
gyro
amon
apphq
its in hq
mu
cameo
AMIO
amio
amio
ceres
AMIO
amio
amio
amio
AMIO
CaMIO
apma
AMMO
AMMO
AMMI
moi
sentry
remo
rcm
amon
amon  "aymon"
exsert
expose
expede
opal   -- online learning library
star
vesta
ceres
arc  --  is archive util on Linx
rex
axe
apex
hexa
exon -- too much like Exxon
atria
ximo
xinu
nuxi
ximu  xi-mu
ximo
exio
ximon
exmon  -- microsoft project


